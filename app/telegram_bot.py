from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import os
from dotenv import load_dotenv
from . import crud
from .database import SessionLocal
from datetime import datetime
import logging

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL", "http://localhost:3000")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        db = SessionLocal()
        user = crud.get_user_by_telegram_id(db, update.effective_user.id)
        if not user:
            user = crud.create_user(db, {
                "telegram_id": update.effective_user.id,
                "username": update.effective_user.username,
                "first_name": update.effective_user.first_name,
                "last_name": update.effective_user.last_name
            })
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("ü•§ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", callback_data="add_drink")],
            [InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data="goals")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = """
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        /sober - –ù–∞—á–∞—Ç—å –ø–µ—Ä–∏–æ–¥ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
        /app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        """
        await update.message.reply_text(help_text)
    except Exception as e:
        logger.error(f"Error in help command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        db = SessionLocal()
        user = crud.get_user_by_telegram_id(db, update.effective_user.id)
        
        if not user:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        drinks = crud.get_user_drinks(db, user.id)
        total_alcohol = sum(drink.volume * drink.alcohol_content / 100 for drink in drinks)
        days_with_drinks = len(set(drink.created_at.date() for drink in drinks))
        
        stats_text = f"""
        üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        –í—Å–µ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è: {total_alcohol:.1f} –º–ª
        –î–Ω–µ–π —Å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º: {days_with_drinks}
        """
        
        await update.message.reply_text(stats_text)
    except Exception as e:
        logger.error(f"Error in stats command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()

async def sober(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sober"""
    try:
        db = SessionLocal()
        user = crud.get_user_by_telegram_id(db, update.effective_user.id)
        
        if not user:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
        period = crud.create_sober_period(db, {
            "user_id": user.id,
            "start_time": datetime.now(),
            "is_active": True
        })
        await update.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏. "
            "–î–µ—Ä–∂–∏—Ç–µ—Å—å!"
        )
    except Exception as e:
        logger.error(f"Error in sober command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()

async def app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app"""
    try:
        await update.message.reply_text(
            "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://your-app-url.com"
        )
    except Exception as e:
        logger.error(f"Error in app command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "stats":
            await stats(update, context)
        elif query.data == "add_drink":
            keyboard = [
                [InlineKeyboardButton("üç∫ –ü–∏–≤–æ", callback_data="drink_beer")],
                [InlineKeyboardButton("üç∑ –í–∏–Ω–æ", callback_data="drink_wine")],
                [InlineKeyboardButton("ü•É –ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å", callback_data="drink_spirits")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–∏—Ç–∫–∞:",
                reply_markup=reply_markup
            )
        elif query.data == "goals":
            keyboard = [
                [InlineKeyboardButton("üéØ –ù–æ–≤–∞—è —Ü–µ–ª—å", callback_data="new_goal")],
                [InlineKeyboardButton("üìã –ú–æ–∏ —Ü–µ–ª–∏", callback_data="list_goals")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        elif query.data.startswith("drink_"):
            drink_type = query.data.split("_")[1]
            context.user_data["drink_type"] = drink_type
            await query.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –Ω–∞–ø–∏—Ç–∫–∞ –≤ –º–ª:"
            )
        elif query.data == "new_goal":
            await query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '30 –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏'):"
            )
        elif query.data == "list_goals":
            db = SessionLocal()
            user = crud.get_user_by_telegram_id(db, update.effective_user.id)
            
            if not user:
                await query.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
                )
                return
            
            goals = crud.get_user_goals(db, user.id)
            if not goals:
                await query.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å!"
                )
                return
            
            goals_text = "üìã –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
            for goal in goals:
                goals_text += f"- {goal.description}\n"
            
            await query.message.reply_text(goals_text)
    except Exception as e:
        logger.error(f"Error in button callback: {str(e)}")
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("sober", sober))
        application.add_handler(CommandHandler("app", app))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(button_callback))
        
        return application
    except Exception as e:
        logger.error(f"Error setting up bot: {str(e)}")
        raise

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = setup_bot()
    bot.run_polling() 